using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Cheese_Miner
{
    struct Player
    {
        public string Name;
        public int X_Position;
        public int Y_Position;
        public int Score;
    }

    struct board
    {
        public bool cheese;
        public bool Player_Populate;
    }

    class Program
    {
        static int Array_Size = 4;
        static Player[] Players = new Player[Array_Size];

        //making 8 by 8 grid 
        static int Board_Size_Max = 8;
        static board[,] Grid = new board[Board_Size_Max, Board_Size_Max];

        // global variables  
        static string winner;
        static List<int> Same_Space_Players = new List<int>();
        static int Player_Number;
        static int Move_Player_Number;
        static bool End_Game = false;
        static bool restart = true;



        //Prosedures and functions

        //player stats
        static void ShowStatus()
        {
            Console.WriteLine("there are " + Player_Number + " players in the game");
            for (int i = 0; i < Player_Number; i++)
            {
                //x and y need to be swaped becaus the bord draws horazontaly so there is less wasted space on console
                Console.WriteLine(Players[i].Name + " is on squaure " + "(" + Players[i].Y_Position + "," + Players[i].X_Position + ") and has " + Players[i].Score + " cheeses");
            }
        }

        //PLAYER HANDALING 
        static void Player_Movement(int Current_Player_Number, int Distance, char Direction)
        {
            Clear_player_population();
            Console.WriteLine("Moving " + Players[Current_Player_Number].Name);
            //deleates old bord space 
            Grid[Players[Current_Player_Number].X_Position, Players[Current_Player_Number].Y_Position].Player_Populate = false;
            switch (Direction)
            {
                case 'L':
                    Players[Current_Player_Number].X_Position = Players[Current_Player_Number].X_Position - Distance;
                    if (Players[Current_Player_Number].X_Position < 0)
                        Players[Current_Player_Number].X_Position = Players[Current_Player_Number].X_Position + Board_Size_Max;
                    break;

                case 'R':
                    Players[Current_Player_Number].X_Position = Players[Current_Player_Number].X_Position + Distance;
                    if (Players[Current_Player_Number].X_Position > Board_Size_Max - 1)
                        Players[Current_Player_Number].X_Position = Players[Current_Player_Number].X_Position - Board_Size_Max;
                    break;

                case 'U':
                    Players[Current_Player_Number].Y_Position = Players[Current_Player_Number].Y_Position - Distance;
                    if (Players[Current_Player_Number].Y_Position < 0)
                        Players[Current_Player_Number].Y_Position = Players[Current_Player_Number].Y_Position + Board_Size_Max;
                    break;

                case 'D':
                    Players[Current_Player_Number].Y_Position = Players[Current_Player_Number].Y_Position + Distance;
                    if (Players[Current_Player_Number].Y_Position > Board_Size_Max - 1)
                        Players[Current_Player_Number].Y_Position = Players[Current_Player_Number].Y_Position - Board_Size_Max;
                    break;
            }
            Cheese_Detection(Current_Player_Number);
            Player_Detection(Current_Player_Number);
            clear_all_same_player();
            Grid[Players[Current_Player_Number].X_Position, Players[Current_Player_Number].Y_Position].Player_Populate = true;

        }

        static void clear_all_same_player()
        {
            for (int i = 0; i < Same_Space_Players.Count; i++)
            {
                Same_Space_Players.RemoveAt(i);
            }
        }

        static void Clear_player_population()
        {
            for (int i = 0; i < 7; i++)
                for (int x = 0; x < 7; x++)
                    Grid[i, x].Player_Populate = false;
        }

        static void Player_Detection(int Current_Player_Number)
        {
            int i = 0;
            List<int> players_to_search = new List<int>();
            for (int x = 0; x < Player_Number; x++)
            {
                players_to_search.Add(x);
            }
            players_to_search.RemoveAt(Current_Player_Number);
            foreach (int j in players_to_search)
            {
                if (Players[Current_Player_Number].X_Position == Players[j].X_Position && Players[Current_Player_Number].Y_Position == Players[j].Y_Position)
                {
                    Same_Space_Players.Add(i);
                    i++;
                }
            }
            //CHEESE STEAL MECHANICS (big so gave own sub hedading )
            Cheese_Steal_Multi(Current_Player_Number, Same_Space_Players);
            foreach (int p in players_to_search)
                if (Same_Space_Players.Count == 1)
                {
                    Players[Current_Player_Number].Score++;
                    // 0 = only one there 
                    Players[Same_Space_Players[0]].Score--;
                    if (Players[Same_Space_Players[0]].Score < 0)
                    {
                        Players[Same_Space_Players[0]].Score = 0;
                    }
                    break;
                }
            Win_Conditon();
            for (i = 0; i < players_to_search.Count; i++)
            {
                players_to_search.RemoveAt(i);
            }
        }

        static void Cheese_Steal_Multi(int Current_Player_Number, List<int> Players_To_Search)
        {
            int Victim_Number;
            int Victim;
            for (int i = 0; i < Same_Space_Players.Count; i++)
            {
                if (Players[i].Score == 0)
                {
                    Same_Space_Players.RemoveAt(i);
                }
            }
            if (Same_Space_Players.Count < 2)
            {
                return;
            }
            if (Same_Space_Players.Count == 2)
            {
                for (int j = 0; j < Same_Space_Players.Count; j++)
                {
                    int Next = j + 1;
                    Console.WriteLine(Next + " ." + Players[Same_Space_Players[j]].Name + " has " + Players[Same_Space_Players[j]].Score + " cheeses");
                }
                Players[Current_Player_Number].Score++;
                Console.WriteLine("select a victim to steal cheese from");
                Victim_Number = int.Parse(Console.ReadLine());
                Victim = Victim_Number - 1;

                switch (Victim_Number)
                {
                    case 1:
                        Players[Same_Space_Players[Victim]].Score--;
                        break;
                    case 2:
                        Players[Same_Space_Players[Victim]].Score--;
                        break;
                }

                if (Same_Space_Players.Count == 3)
                {
                    foreach (int j in Players_To_Search)
                        Console.WriteLine(j + " ." + Players[Same_Space_Players[j - 1]].Name + " has " + Players[j - 1].Score + " cheeses");
                    Players[Current_Player_Number].Score++;
                    Console.WriteLine("select a victim to steal cheese from");
                    Victim_Number = int.Parse(Console.ReadLine());
                    Victim = Victim_Number - 1;

                    switch (Victim_Number)
                    {
                        case 1:
                            Players[Same_Space_Players[Victim]].Score--;
                            break;

                        case 2:
                            Players[Same_Space_Players[Victim]].Score--;
                            break;

                        case 3:
                            Players[Same_Space_Players[Victim]].Score--;
                            break;
                    }
                    if (Players[Same_Space_Players[Victim]].Score < 0)
                    {
                        Players[Same_Space_Players[Victim]].Score = 0;
                    }
                }
            }
        }


        //random die
        static int Die_Throw_Random()
        {
            Random rnd_Die = new Random();
            int Die_Value = rnd_Die.Next(1, 7);
            return Die_Value;
        }

        // CHEESSE INTERACTIONS 
        static void Cheese_Detection(int Current_Player_Number)
        {
            if (Grid[Players[Current_Player_Number].X_Position, Players[Current_Player_Number].Y_Position].cheese == true)
            {
                Grid[Players[Current_Player_Number].X_Position, Players[Current_Player_Number].Y_Position].cheese = false;
                Players[Current_Player_Number].Score = Players[Current_Player_Number].Score + 1;
            }
            Win_Conditon();
        }

        static void Cheese_Imput()
        {
            //int Cheese_Limit = 4 * Player_Number;
            int Cheese_Limit = 16;
            int Cheese_Number = 0;
            int Cheese_X_Position;
            int Cheese_Y_Position;
            //Imputs cheese to the Grid  
            do
            {
                for (int i = 0; i < Player_Number + 1; i++)
                {
                    if (i < Player_Number)
                    {
                        Console.WriteLine(" " + Players[i].Name + "  pick a X co-ordienet for the cheese ");
                        string Cheese_X_Position_string = Console.ReadLine();
                        Cheese_X_Position = Data_Check_int(Board_Size_Max - 1, 0, Cheese_X_Position_string);

                        Console.WriteLine(" " + Players[i].Name + "  pick a Y co-ordienet for the cheese ");
                        string Cheese_Y_Position_string = Console.ReadLine();
                   Cheese_Y_Position = Data_Check_int(Board_Size_Max - 1, 0, Cheese_Y_Position_string);
                        Console.Clear();

                        if ((Grid[Cheese_X_Position, Cheese_Y_Position].cheese == true) ||
                            (Cheese_X_Position == 0 && Cheese_Y_Position == 0) ||
                            (Cheese_X_Position == 0 && Cheese_Y_Position == Board_Size_Max - 1) ||
                            (Cheese_X_Position == Board_Size_Max - 1 && Cheese_Y_Position == 0) ||
                            (Cheese_X_Position == Board_Size_Max - 1 && Cheese_Y_Position == Board_Size_Max - 1))
                        {
                            do
                            {
                                Console.Clear();
                                Console.WriteLine("you have enterd a space that alredy has a cheese or a player is in that space in try another  ");
                                Console.WriteLine(" " + Players[i].Name + "  pick a X co-ordienet for the cheese ");
                                Cheese_X_Position_string = Console.ReadLine();
                                Cheese_X_Position = Data_Check_int(Board_Size_Max - 1, 0, Cheese_X_Position_string);

                                Console.WriteLine(" " + Players[i].Name + "  pick a Y co-ordienet for the cheese ");
                                Cheese_Y_Position_string = Console.ReadLine();
                                Cheese_Y_Position = Data_Check_int(Board_Size_Max - 1, 0, Cheese_Y_Position_string);
                                Console.Clear();
                                //change
                            } while (Grid[Cheese_X_Position, Cheese_Y_Position].cheese == true);
                        }
                        else if (Grid[Cheese_X_Position, Cheese_Y_Position].cheese == false)
                        {
                            Grid[Cheese_X_Position, Cheese_Y_Position].cheese = true;
                            Cheese_Number++;
                        }
                    }
                    else
                    {
                        i = 0;
                        break;
                    }
                }
            } while (Cheese_Number + 1 < Cheese_Limit);
        }

        //RNCESUS
        static void RNG_Cheese(int Number_of_Cheese)
        {
            Random rng_Cheese = new Random();

            int Cheese_X_Position = rng_Cheese.Next(0, Board_Size_Max);
            int Cheese_Y_Position = rng_Cheese.Next(0, Board_Size_Max);
            int i = 0;
            do
            {
                if ((Grid[Cheese_X_Position, Cheese_Y_Position].cheese == true) ||
            (Cheese_X_Position == 0 && Cheese_Y_Position == 0) ||
            (Cheese_X_Position == 0 && Cheese_Y_Position == Board_Size_Max - 1) ||
            (Cheese_X_Position == Board_Size_Max - 1 && Cheese_Y_Position == 0) ||
                       (Cheese_X_Position == Board_Size_Max - 1 && Cheese_Y_Position == Board_Size_Max - 1))
                {
                    Cheese_X_Position = rng_Cheese.Next(0, Board_Size_Max);
                    Cheese_Y_Position = rng_Cheese.Next(0, Board_Size_Max);
                    continue;
                }
                else
                {
                    Grid[Cheese_X_Position, Cheese_Y_Position].cheese = true;
                    i++;
                    Cheese_X_Position = rng_Cheese.Next(0, Board_Size_Max);
                    Cheese_Y_Position = rng_Cheese.Next(0, Board_Size_Max);
                }
            } while (i < Number_of_Cheese);
        }

        //BOARD MANIPULATION
        static void Clear_Grid()
        {
            for (int i = 0; i < Board_Size_Max - 1; i++)
                for (int j = 0; j < Board_Size_Max - 1; j++)
                    Grid[i, j].cheese = false;
        }
        static void Score_And_Player_Population_Set()
        {
            for (int i = 0; i < Player_Number; i++)
            {
                Players[i].Score = 0;
                Grid[Players[i].X_Position, Players[i].Y_Position].Player_Populate = true;
            }
        }

        // board display
        static void Display_Board()
        {
            /*
            for (int Y = 0; Y < Board_Size_Max; Y++)
            {
                for (int X = 0; X < Board_Size_Max; X++)
                {
                    if (Grid[X, Y].cheese == true)
                    {
                        Console.Write("C");
                        
                    }
                    if ((Grid[X, Y].Player_Populate == true) && (Grid[X, Y].cheese == false))
                    {
                        for (int k = 0; k < Player_Number; k++)
                        {
                            if ((X == Players[k].X_Position) && (Y == Players[k].Y_Position))
                            {
                                Console.Write("P");
                            }
                        }
                    }
                    if (Grid[X, Y].cheese == false && Grid[X, Y].Player_Populate == false)
                    {
                        Console.Write("X");   
                    }
                    Console.Write("|");
                  Console.Write("--");
                }
                Console.WriteLine();
            }*/

            int Board_Display_Max = 27;
            int Board_Display_X;
            int Board_Display_Y;
            int Board_Display_Cheese_X;
            int Board_Display_Cheese_Y;
            for (int Y = 0; Y < Board_Display_Max; Y++)
            {
                for (int X = 0; X < Board_Display_Max; X++)
                {
                    for (int i = 0; i < Player_Number; i++)
                    {
                        Board_Display_X = (3 * Players[i].X_Position + 2);
                        Board_Display_Y = (3 * Players[i].Y_Position + 2);
                        Board_Display_Cheese_X = (X - 2) / 3;
                        Board_Display_Cheese_Y = (Y - 2) / 3;
                        if ((X == Board_Display_X) && (Y == Board_Display_Y))
                        {
                            Console.Write("p");

                        }


                        else if ((X == 0) || (Y == 0) || (X == Board_Display_Max - 1) || (Board_Display_Max - 1 == Y) || ((X % 3 == 1) || (Y % 3 == 1)))
                        {
                            Console.Write("*");
                        }

                        else if (Grid[Board_Display_Cheese_X, Board_Display_Cheese_Y].cheese == true)
                        {
                            Console.Write("C");

                        }
                        else
                        {
                            Console.Write(" ");
                        }

                    }


                }
                Console.WriteLine();
            }

        }


        //GAME STATE
        static void Win_Conditon()
        {
            for (int i = 0; i < Player_Number; i++)
            {
                if (Players[i].Score >= 6)
                {
                    Console.WriteLine(Players[i].Name + " WINS!!!");
                    winner = Players[i].Name;
                    End_Game = true;

                }
            }
        }

        // IDIOT PROOF COAD
        static int Data_Check_int(int Max_Check, int Min_Check, string Data_Check_Sring)
        {
            do
            {
                try
                {
                    int Data_Check_Number = int.Parse(Data_Check_Sring);
                    if (Data_Check_Number > Max_Check)
                    {
                        Console.WriteLine("Number is too high enter again");
                        Data_Check_Sring = Console.ReadLine();
                        continue;
                    }

                    if (Data_Check_Number < Min_Check)
                    {
                        Console.WriteLine("Number is too low enter again");
                        Data_Check_Sring = Console.ReadLine();
                        continue;
                    }
                    else
                    {
                        return Data_Check_Number;
                    }
                }
                catch
                {
                    Console.WriteLine("Value must be a number between " + Max_Check + " and " + Min_Check);
                    Data_Check_Sring = Console.ReadLine();
                    continue;
                }
            } while (true);
        }

        static void Data_Check_Player_Name(string Name_Imput)
        {
            for (int i = 0; i < Player_Number; i++)
            {
                Name_Imput = Name_Imput.ToLower();
                Players[i].Name = Players[i].Name.ToLower();
                if (Name_Imput == Players[i].Name)
                {
                    return;
                }
            }
            Console.WriteLine("You have enterd an invalid name please input a valid name");
            Name_Imput = Console.ReadLine();
            // goes back to check that playern name again 
        }

        static char Data_Check_Char(string Char_Imput_String)
        {
            do
            {
                try
                {
                    char Char_Imput = char.Parse(Char_Imput_String);
                    Char_Imput = Char.ToUpper(Char_Imput);

                    if ((Char_Imput == 'R') ||
                        (Char_Imput == 'L') ||
                        (Char_Imput == 'U') ||
                        (Char_Imput == 'D'))
                    {

                        return Char_Imput;
                    }

                    else if ((Char_Imput != 'R') ||
                             (Char_Imput != 'L') ||
                             (Char_Imput != 'U') ||
                             (Char_Imput != 'D'))
                    {
                        Console.WriteLine("You have enterd an invalid Direction please input a valid name");
                        Char_Imput_String = Console.ReadLine();
                        continue;
                    }
                }
                catch
                {
                    Console.WriteLine(" please enter a char ");
                    Char_Imput_String = Console.ReadLine();
                    continue;
                }

            } while (true);
        }

        static char User_Mode_Data_Check(string Promt)
        {
            do
            {
                Console.WriteLine(Promt);
                try
                {
                    char User_Imput = char.Parse(Console.ReadLine());
                    User_Imput = char.ToUpper(User_Imput);
                    Console.Clear();
                    if (User_Imput == 'Y' || User_Imput == 'N')
                    {
                        return User_Imput;
                    }
                    else
                    {
                        continue;
                    }
                }

                catch
                {
                    continue;
                }

            } while (true);
        }

        static void Main(string[] args)
        {
            do
            {
                string Test_Prompt = "Test Mode Y or N";
                char Test_Mode = User_Mode_Data_Check(Test_Prompt);

                Console.Clear();


                // setting inital positions in the grid 
                // delibertly left these as numbers cause helps with 5ebugging 
                Players[0].X_Position = 0;
                Players[0].Y_Position = 0;

                Players[1].X_Position = 0;
                Players[1].Y_Position = 7;

                Players[2].X_Position = 3;
                Players[2].Y_Position = 3;

                Players[3].X_Position = 0;
                Players[3].Y_Position = 0;
                Clear_Grid();

                if (Test_Mode == 'N')
                {
                    Console.WriteLine("Enter the amount of Players");
                    string Player_Number_String = Console.ReadLine();
                    Player_Number = Data_Check_int(4, 2, Player_Number_String);
                    Console.Clear();

                    Score_And_Player_Population_Set();
                    string Cheese_Prompt = "Do you want to auto place cheese";
                    char Cheese_Auto = User_Mode_Data_Check(Cheese_Prompt);
                    
                    for (int i = 0; i < Player_Number; i++)
                    {
                        int Next = i + 1;
                        Console.WriteLine("Enter the name of player " + Next + "");
                        Players[i].Name = Console.ReadLine();
                    }
                    if (Cheese_Auto == 'N')
                    {
                        Cheese_Imput();
                    }
                    else
                    {
                        int Cheese_Max = 16;
                        RNG_Cheese(Cheese_Max);
                        Display_Board();
                    }
                    do
                    {
                        for (int i = 0; i < Player_Number; i++)
                        {
                            Console.WriteLine("enter moving players Name ");
                            string Move_Number_String = Console.ReadLine();
                            Data_Check_Player_Name(Move_Number_String);
                            Move_Player_Number = i;

                            int Move_Die_roll = Die_Throw_Random();
                            Console.WriteLine(Move_Number_String + " rolled a " + Move_Die_roll);
                            Display_Board();

                            Console.WriteLine("enter your player direction ");
                            string Move_Direction_String = Console.ReadLine();
                            char Move_Direction = Data_Check_Char(Move_Direction_String);
                            Console.Clear();

                            Player_Movement(Move_Player_Number, Move_Die_roll, Move_Direction);




                            ShowStatus();

                        }

                        string Reset_Prompt = "Dose everybody want to play again? Y/N";
                        Console.WriteLine("congratulations " + winner + ". Dose everybody want to play again? Y/N");
                        char Reset_Menu = User_Mode_Data_Check(Reset_Prompt);

                        if (Reset_Menu == 'N')
                        {
                            restart = false;
                        }
                    } while (End_Game == false);
                }


                if (Test_Mode == 'Y')
                {
                    Player_Number = 4;

                    Players[0].X_Position = 0;
                    Players[0].Y_Position = 0;

                    Players[1].X_Position = 7;
                    Players[1].Y_Position = 0;

                    Players[2].X_Position = 7;
                    Players[2].Y_Position = 7;

                    Players[3].X_Position = 0;
                    Players[3].Y_Position = 7;
                    Score_And_Player_Population_Set();

                    Players[0].Name = "Green";
                    Players[1].Name = "Yellow";
                    Players[3].Name = "Blue";
                    Players[2].Name = "Red";
                    Players[2].Score = 0;
                    Players[3].Score = 3;
                    Players[1].Score = 0;
                    Players[0].Score = 0;

                    //cheese placement
                    Grid[1, 0].cheese = true;
                    Grid[3, 6].cheese = true;
                    Grid[5, 3].cheese = true;
                    Grid[2, 7].cheese = true;
                    Grid[0, 5].cheese = true;
                    Grid[0, 1].cheese = true;
                    Grid[5, 5].cheese = true;
                    Grid[2, 4].cheese = true;
                    Grid[1, 3].cheese = true;
                    Grid[6, 1].cheese = true;
                    Grid[6, 2].cheese = true;
                    Grid[6, 7].cheese = true;
                    Grid[4, 5].cheese = true;
                    Grid[5, 0].cheese = true;
                    Grid[7, 6].cheese = true;
                    Grid[6, 0].cheese = true;
                    //Display_Board();
                    do
                    {
                        Display_Board();
                        //T1
                        Console.WriteLine("Turn: 1");
                        Player_Movement(0, 1, 'R');
                        Player_Movement(1, 6, 'L');
                        Player_Movement(2, 1, 'U');
                        Player_Movement(3, 1, 'R');
                        ShowStatus();
                        //T2
                        Console.WriteLine("Turn: 2");
                        Player_Movement(0, 3, 'D');
                        Player_Movement(1, 3, 'D');
                        Player_Movement(2, 1, 'U');
                        Player_Movement(3, 4, 'D');
                        ShowStatus();
                        //T3
                        Console.WriteLine("Turn: 3");
                        Player_Movement(0, 4, 'R');
                        Player_Movement(1, 4, 'R');
                        Player_Movement(2, 1, 'R');
                        Player_Movement(3, 4, 'R');
                        ShowStatus();
                        //T4
                        Console.WriteLine("Turn: 4");
                        Player_Movement(0, 2, 'D');
                        Player_Movement(1, 2, 'D');
                        Player_Movement(2, 3, 'L');
                        Player_Movement(3, 2, 'D');

                        Display_Board();
                    } while (End_Game == false);
                    string Reset_Prompt = "Dose everybody want to play again? Y/N";
                    Console.WriteLine("congratulations " + winner + ".");
                    char Reset_Menu = User_Mode_Data_Check(Reset_Prompt);

                    if (Reset_Menu == 'N')
                    {
                        restart = false;
                    }
                }
                /* 
               test doc
               https://github.com/ll01/Cheese_Miner.git
               */
            } while (restart == true);
        }
    }
}
